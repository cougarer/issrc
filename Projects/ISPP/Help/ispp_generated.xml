<?xml version="1.0"?>
<!--
    Inno Setup Preprocessor Reference
    Copyright (C) 1997-2020 Jordan Russell
    Portions Copyright (C) 2000-2020 Martijn Laan
    For conditions of distribution and use, see LICENSE.TXT.
    Portions Copyright (C) 2001-2004 Alex Yackimoff

    This file is automatically generated. Do not edit.
  -->
<!DOCTYPE ishelp SYSTEM "isetup.dtd">
<ishelp version="1">
<!--Table of contents-->
<contents>
<contentsheading title="Inno Setup Preprocessor">
<contentstopic title="Introduction" topic="isppoverview" />
<contentstopic title="Directives Reference" topic="directives" />
<contentstopic title="Support Functions Reference" topic="funcs" />
<contentstopic title="User Defined Functions" topic="macros" />
<contentstopic title="Expression Syntax" topic="expressions" />
<contentstopic title="Predefined Variables" topic="predefinedvars" />
<contentstopic title="Line Spanning" topic="linespan" />
<contentsheading title="Other Information">
<contentstopic title="Visibility of Identifiers" topic="visibility" />
<contentstopic title="Example Script" topic="example" />
<contentstopic title="ISPPBuiltins.iss" topic="builtinsiss" />
<contentstopic title="Extended Command Line Compiler" topic="isppcc" />
</contentsheading>
</contentsheading>
</contents>
<!--Topics-->
<topic name="isppoverview" title="Inno Setup Preprocessor: Introduction">
<keyword value="Introduction" />
<body>
<p>The main purpose of Inno Setup Preprocessor (ISPP) is to automate compile-time tasks and avoid repetition in your scripts. For example, you can declare a compile-time ISPP variable – containing your application name, for instance – and then use its value in several places of your script. If for some reason you need to change the name of your application, you'll have to change it only once in your script. Without ISPP, you would need to change all occurrences of your application name throughout the script.</p>
<p>Another example of using ISPP would be gathering version information from your application at compile-time by reading the version info of an EXE file, and using it in your <extlink href="ms-its:isetup.chm::/topic_setup_appvername.htm">AppVerName</extlink> [Setup] section directive or anywhere else. Without ISPP, you would have to modify your script each time the version of your application changes.</p>
<p>ISPP can even scan your source folder and generate script lines for the found files. Without ISPP, you would have to manually maintain the list of files.</p>
<p>Conditional in- and exclusion of portions of script is also possible by using ISPP: you can create one single script for different versions/levels of your applications (for example, trial versus fully functional). Without ISPP, you would need multiple scripts.</p>
<p>Finally, ISPP makes it possible to split long lines using a line spanning symbol.</p>
<p>Note: ISPP works exclusively at compile-time, and has no run-time functionality.</p>
<heading>All topics</heading>
<ul>
<li><link topic="directives">Directives Reference</link></li>
<li><link topic="funcs">Support Functions Reference</link></li>
<li><link topic="macros">User Defined Functions</link></li>
<li><link topic="expressions">Expression Syntax</link></li>
<li><link topic="predefinedvars">Predefined Variables</link></li>
<li><link topic="linespan">Line Spanning</link></li>
<li><link topic="example">Example Script</link></li>
<li><link topic="builtinsiss">ISPPBuiltins.iss</link></li>
<li><link topic="visibility">Visibility of Identifiers</link></li>
<li><link topic="isppcc">Command Line Compiler Execution</link></li>
<li><link topic="translation">Preprocessor output</link></li>
<li><link topic="current-translation">Current preprocessor output</link></li>
</ul>
</body>
</topic>
<topic name="directives" title="Inno Setup Preprocessor: Directives Reference">
<keyword value="Directives Reference" />
<body>
<p>There are two kinds of directives in ISPP: simple and inline.</p>
<p>Simple directives occupy a whole line and begin with the <tt>#</tt> symbol. For example the following defines a variable called <tt>MyAppName</tt>:</p>
<p><tt>#define MyAppName "My Program"<br />
</tt></p>
<p>Inline directives appear inside other lines and begin with <tt>{#</tt> and end with <tt>}</tt>. For example the following sets Inno Setup's <tt>AppName</tt> directive to the value of the previously defined variable:</p>
<p><tt>[Setup]<br />AppName={#MyAppName}<br />
</tt></p>
<p>As seen in the above example it is not necessary to specify the name of the <tt><link topic="emit">emit</link></tt> directive when it is used inline, so <tt>{#MyAppName}</tt> is short for <tt>{#emit MyAppName}</tt>.</p>
<heading>Directive syntax documenting conventions</heading>
<p>Directive usage syntax uses the following conventions.</p>
<table><tr><td><tt>()</tt>
</td>
<td>Group of tokens.</td>
</tr>
<tr><td><tt>[]</tt>
</td>
<td>Optional token or group of tokens.</td>
</tr>
<tr><td><tt>|</tt>
</td>
<td>Mutually exclusive tokens.</td>
</tr>
<tr><td><tt>...</tt>
</td>
<td>Previous token or group of tokens can be repeated.</td>
</tr>
<tr><td><tt><b>token</b></tt>
</td>
<td>Reserved word or symbol(s). Must be typed exactly as shown.</td>
</tr>
<tr><td><tt>&lt;token&gt;</tt>
</td>
<td>Non-terminal. Its syntax is either shown before, or explained.</td>
</tr>
</table>
<heading>Available directives</heading>
<ul>
<li><link topic="define">#define</link></li>
<li><link topic="dim">#dim, #redim</link></li>
<li><link topic="undef">#undef</link></li>
<li><link topic="include">#include</link></li>
<li><link topic="file">#file</link></li>
<li><link topic="emit">#emit</link></li>
<li><link topic="expr">#expr</link></li>
<li><link topic="insert">#insert</link></li>
<li><link topic="append">#append</link></li>
<li><link topic="if">#if, #elif, #else, #endif</link></li>
<li><link topic="ifdef">#ifdef, #ifndef, #ifexist, #ifnexist</link></li>
<li><link topic="for">#for</link></li>
<li><link topic="sub">#sub, #endsub</link></li>
<li><link topic="pragma">#pragma</link></li>
<li><link topic="error">#error</link></li>
</ul>
</body>
</topic>
<topic name="define" title="Inno Setup Preprocessor: #define">
<keyword value="#define" />
<keyword value="#:" />
<keyword value="define" />
<body>
<heading>Syntax</heading>
<table>
<tr>
<td>
<i>define-directive:</i></td>
<td> &lt;variable-definition&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;macro-definition&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;default-visibility-set&gt; </td>
</tr>
</table>
<table><tr><td><i>variable-definition:</i>
</td><td> (<b>define</b> | <b>:</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  [<b>[</b>  &lt;expr&gt;  <b>]</b>]  [[<b>=</b>] &lt;expr&gt;] </td></tr></table>
<table><tr><td><i>macro-definition:</i>
</td><td> (<b>define</b> | <b>:</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  <b>(</b>  [&lt;formal-macro-args&gt;]  <b>)</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>default-visibility-set:</i>
</td><td> (<b>define</b> | <b>:</b>)  <b>private</b> | <b>protected</b> | <b>public</b> </td></tr></table>
<table><tr><td><i>formal-macro-args:</i>
</td><td> &lt;formal-macro-arg&gt;  [<b>,</b> &lt;formal-macro-arg&gt;]... </td></tr></table>
<table><tr><td><i>formal-macro-arg:</i>
</td><td> &lt;by-val-arg&gt;  |  &lt;by-ref-arg&gt; </td></tr></table>
<table><tr><td><i>by-val-arg:</i>
</td><td> [&lt;type-id&gt;]  &lt;ident&gt;  [<b>=</b> &lt;expr&gt;] </td></tr></table>
<table><tr><td><i>by-ref-arg:</i>
</td><td> [&lt;type-id&gt;]  <b>*</b>  &lt;ident&gt; </td></tr></table>
<table><tr><td><i>type-id:</i>
</td><td> <b>any</b>  |  <b>int</b>  |  <b>str</b>  |  <b>func</b> </td></tr></table>
<heading>Description</heading>
<p>The first syntax ("variable-definition") defines a variable named <tt>ident</tt>, or assigns a value to an element of an array named <tt>ident</tt> (use <tt><link topic="dim">dim</link></tt> instead of <tt>define</tt> to define the array variable itself). If none of the <tt>public</tt>, <tt>protected</tt>, or <tt>private</tt> keywords are specified, default <link topic="visibility">visibility</link> is assumed.</p>
<p>The second syntax ("macro-definition") defines <link topic="macros">a user defined function</link> named <tt>ident</tt>. When defining a user defined function there must be no whitespace between the name and opening parenthesis, otherwise it will be treated as variable declaration.</p>
<p>The third syntax ("default-visibility-set") sets the default <link topic="visibility">visibility</link> of further variable and user defined function definitions in this file. If no visibility declaration occurs in a file, public visibility is assumed by default.</p>
<heading>Examples</heading>
<p><tt>#define MyAppName "My Program"<br />#define MyAppExe MyAppName + ".exe"<br />#define MyAppVer <link topic="getversionnumbersstring">GetVersionNumbersString</link>(MyAppExe)<br />#define MyArray[0] 15<br />#define Multiply(int A, int B = 10) A * B<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="dim">dim</link></tt>, <tt><link topic="undef">undef</link></tt>, <link topic="visibility">Visibility of Identifiers</link>.</p>
<p><link topic="macros">User Defined Functions</link>.</p>
</body>
</topic>
<topic name="dim" title="Inno Setup Preprocessor: #dim, #redim">
<keyword value="#dim, #redim" />
<keyword value="dim" />
<keyword value="#redim" />
<keyword value="redim" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>dim-directive:</i>
</td><td> <b>dim</b>  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  <b>[</b>  &lt;expr&gt;  <b>]</b>  [<b>{</b>  &lt;expr&gt;  [<b>,</b> &lt;expr&gt;]...  <b>}</b>] </td></tr></table>
<table><tr><td><i>redim-directive:</i>
</td><td> <b>redim</b>  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  <b>[</b>  &lt;expr&gt;  <b>]</b> </td></tr></table>
<heading>Description</heading>
<p>Use <tt>dim</tt> to define an array variable, set its dimension and optionally intialize it. All unitialized elements of the array are initialized to null (void). To assign an element value after declaring the array, use <tt><link topic="define">define</link></tt>. Instead of assigning element values with <tt><link topic="define">define</link></tt>, it is also possible to set an element value by using it as the left operand of an assignment.</p>
<p>Use <tt>redim</tt> to increase or decrease the dimension of an existing array variable. All new elements of the array are initialized to null (void) and existing elements are left unchanged. Identical to <tt>dim</tt> if <tt>ident</tt> isn't an existing array variable.</p>
<heading>Examples</heading>
<p><tt>#dim MyArray[10]<br />#define MyArray[0] 15<br />#redim MyArray[20]<br />#define MyArray[10] 30<br />#redim MyArray[10]<br />#dim MyArray2[3] {1, 2, 3}<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="define">define</link></tt>, <tt><link topic="undef">undef</link></tt>, <link topic="dimof">DimOf</link>, <link topic="visibility">Visibility of Identifiers</link>.</p>
</body>
</topic>
<topic name="undef" title="Inno Setup Preprocessor: #undef">
<keyword value="#undef" />
<keyword value="#x" />
<keyword value="undef" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>undef-directive:</i>
</td><td> (<b>undef</b> | <b>x</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt; </td></tr></table>
<heading>Description</heading>
<p>Undefines (removes) a variable or user defined function. If no <link topic="visibility">visibility</link> (<tt>public</tt>, <tt>protected</tt>, or <tt>private</tt>) is specified, ISPP first tries to remove a private variable of the given name, then protected, then public.</p>
<heading>Examples</heading>
<p><tt>#undef MyVar<br />#undef MyFunction<br />#undef public MyVar<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="define">define</link></tt>, <tt><link topic="dim">dim</link></tt>, <link topic="visibility">Visibility of Identifiers</link>.</p>
</body>
</topic>
<topic name="include" title="Inno Setup Preprocessor: #include">
<keyword value="#include" />
<keyword value="#+" />
<keyword value="include" />
<body>
<heading>Syntax</heading>
<table>
<tr>
<td>
<i>include-directive:</i></td>
<td> (<b>include</b> | <b>+</b>)  <b>&lt;</b>  &lt;filename&gt;  <b>&gt;</b> </td>
</tr>
<tr>
<td></td>
<td> (<b>include</b> | <b>+</b>)  &lt;expr&gt; </td>
</tr>
</table>
<heading>Description</heading>
<p>Includes the <link topic="translation">preprocessor output</link> of the specified file. If an Unicode file is used, it must be UTF-8 encoded with a BOM.</p>
<p>If the filename is enclosed in quotes, ISPP first searches for the file in the directory where current file resides, then in the directory where the file that included current file resides, and so on. If the file is not found, it is searched on current include path, set via <tt><link topic="pragma">pragma</link></tt>, then on the path specified by INCLUDE environment variable.</p>
<p>If filename is an expression or specified in angle brackets, it is searched on current include path only.</p>
<p>The filename may be prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>
<p>This directive cannot be used inline.</p>
<heading>Examples</heading>
<p><tt>#include &lt;file.iss&gt;<br />#include "c:\dir\file.iss"<br />#include AddBackslash(<link topic="predefinedvars">CompilerPath</link>) + "common.iss"<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="file">file</link></tt>, <tt><link topic="sub">sub</link></tt>.</p>
</body>
</topic>
<topic name="file" title="Inno Setup Preprocessor: #file">
<keyword value="#file" />
<keyword value="file" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>file-directive:</i>
</td><td> <b>file</b>  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p>Replaces the directive with the name of a temporary file containing the <link topic="translation">preprocessor output</link> of the specified file. Upon end of compilation, the temporary file is automatically deleted. If an Unicode file is used, it must be UTF-8 encoded with a BOM.</p>
<p>Including a file using this directive creates a new independent instance of the preprocessor, passing it options currently in effect and all declared identifiers. If the included file modifies options in some way, they are not propagated back.</p>
<p>When using this directive in Inno Setup's Source parameter of the [Files] section, specify a DestName parameter too, else the file with not be installed with the original name.</p>
<p>This directive can only be used inline.</p>
<heading>Examples</heading>
<p><tt>[Setup]<br />LicenseFile={#file "mylic.txt"}<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="include">include</link></tt>.</p>
</body>
</topic>
<topic name="emit" title="Inno Setup Preprocessor: #emit">
<keyword value="#emit" />
<keyword value="#=" />
<keyword value="emit" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>emit-directive:</i>
</td><td> (<b>emit</b> | <b>=</b>)  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p>Replaces the directive with the value of <tt>expr</tt>.</p>
<p>When used inline, the name of this directive can be omitted unless <tt>expr</tt> begins with the name of another directive.</p>
<heading>Examples</heading>
<p><tt>[Files]<br />#emit 'Source: "file1.ext"; DestDir: ' + MyDestDir<br />Source: "file2.ext"; DestDir: {#MyDestDir}<br />#emit GenerateVisualCppFilesEntries ; user defined function<br />
<br />[Code]<br />const<br />  AppName = '{#<link topic="setupsetting">SetupSetting</link>("AppName")}';<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="expr">expr</link></tt>.</p>
</body>
</topic>
<topic name="expr" title="Inno Setup Preprocessor: #expr">
<keyword value="#expr" />
<keyword value="#!" />
<keyword value="expr" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>expr-directive:</i>
</td><td> (<b>expr</b> | <b>!</b>)  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p>Evaluates an expression ignoring its result. This directive acts like <tt><link topic="emit">emit</link></tt> with the exception that it doesn't emit anything to the <link topic="translation">preprocessor output</link>.</p>
<p>This directive is intended to be used with functions that produce side effects and do not return any significant value.</p>
<heading>Examples</heading>
<p><tt>#expr <link topic="savetofile">SaveToFile</link>(AddBackslash(SourcePath) + "Preprocessed.iss"), <link topic="exec">Exec</link>(AddBackslash(CompilerPath) + "Compil32.exe", """" + AddBackslash(SourcePath) + "Preprocessed.iss""")<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="emit">emit</link></tt>.</p>
</body>
</topic>
<topic name="insert" title="Inno Setup Preprocessor: #insert">
<keyword value="#insert" />
<keyword value="insert" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>insert-directive:</i>
</td><td> <b>insert</b>  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p>Changes the insertion point. By default, each processed line is added to the end of the <link topic="translation">preprocessor output</link>. Using <tt>insert</tt> the point at which the next processed line will be added to the <link topic="translation">preprocessor output</link> can be changed. <tt>insert</tt> takes an expression which must evaluate to an integer. The insertion point will be set to this integer.</p>
<p>The insertion point is also always automatically incremented each time after a line has been added to the <link topic="translation">preprocessor output</link>, so that each new line is inserted after the one previously inserted.</p>
<p>It is not recommended to use script generating functions (such as <tt><link topic="setsetupsetting">SetSetupSetting</link></tt>) which may insert a line by themselves, thus shifting a part of the <link topic="translation">preprocessor output</link> one line down, whereas insertion point is not updated. This may result in different insertion point than expected.</p>
<p>The <tt><link topic="find">Find</link></tt> function can be used to produce values for the <tt>insert</tt> directive.</p>
<heading>Examples</heading>
<p><tt>#insert FindSectionEnd("Icons")<br />#insert FindSection("Setup") + 1<br />#insert <link topic="find">Find</link>(0, "somefile.ext", FIND_CONTAINS)<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="append">append</link></tt>.</p>
</body>
</topic>
<topic name="append" title="Inno Setup Preprocessor: #append">
<keyword value="#append" />
<keyword value="append" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>append-directive:</i>
</td><td> <b>append</b> </td></tr></table>
<heading>Description</heading>
<p>Resets the insertion point (if previously changed using <tt><link topic="insert">insert</link></tt>) to the end of the <link topic="translation">preprocessor output</link>.</p>
<heading>See also</heading>
<p><tt><link topic="insert">insert</link></tt>.</p>
</body>
</topic>
<topic name="if" title="Inno Setup Preprocessor: #if, #elif, #else, #endif">
<keyword value="#if, #elif, #else, #endif" />
<keyword value="if" />
<keyword value="#elif" />
<keyword value="elif" />
<keyword value="#else" />
<keyword value="else" />
<keyword value="#endif" />
<keyword value="endif" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>if-directive:</i>
</td><td> <b>if</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>elif-directive:</i>
</td><td> <b>elif</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>else-directive:</i>
</td><td> <b>else</b> </td></tr></table>
<table><tr><td><i>endif-directive:</i>
</td><td> <b>endif</b> </td></tr></table>
<heading>Description</heading>
<p>The <tt>if</tt>, <tt>elif</tt>, <tt>else</tt>, and <tt>endif</tt> conditional directives control in- and exclusion of portions of script.</p>
<p>ISPP first evaluates the expressions following each <tt>if</tt> or <tt>elif</tt> directive until it finds one evaluating to non-zero. It then selects the portion of script following this directive up to its associated <tt>elif</tt>, <tt>else</tt>, or <tt>endif</tt>. Earlier portions which followed an <tt>if</tt> or <tt>elif</tt> which evaluated to zero, or which follows any next <tt>elif</tt> are not selected and thus not seen by the Inno Setup compiler.</p>
<p>If no expression evaluated to non-zero, the preprocessor selects the script portion after the <tt>else</tt> directive if present, otherwise nothing is selected.</p>
<p>Finally, after selecting any script portion, ISPP preprocesses it too, so if it contains other preprocessor directives, ISPP carries out those directives as well.</p>
<p>Each <tt>if</tt> directive in a source file must be matched by a closing <tt>endif</tt> directive. Any number of <tt>elif</tt> directives can appear between the <tt>if</tt> and <tt>endif</tt> directives, but at most one <tt>else</tt> directive is allowed. The <tt>else</tt> directive, if present, must be the last directive before <tt>endif</tt>.</p>
<p>The <tt>if</tt>, <tt>elif</tt>, <tt>else</tt>, and <tt>endif</tt> directives can be nested. Each nested <tt>else</tt>, <tt>elif</tt>, or <tt>endif</tt> directive belongs to the closest preceding <tt>if</tt> directive.</p>
<p>Inline conditional directives may not be mixed with simple. If the <tt>if</tt> directive is simple (occupying a whole line), its associated directives (<tt>elif</tt>, <tt>else</tt>, or <tt>endif</tt>) must also be simple and not inline (appearing inside other lines).</p>
<heading>Examples</heading>
<p><tt>#define Lang<br />
<br />[Tasks]<br />#if "English" == Lang = <link topic="readini">ReadIni</link>(<link topic="setupsetting">SetupSetting</link>("MessagesFile"), \<br />  "LangOptions", "LanguageName")<br />  Description: "For all users"; Name: all<br />#elif "German" == Lang<br />  Description: "Fur alle"; Name: all<br />#else<br /># error Unsupported language<br />#endif<br />
</tt></p>
</body>
</topic>
<topic name="ifdef" title="Inno Setup Preprocessor: #ifdef, #ifndef, #ifexist, #ifnexist">
<keyword value="#ifdef, #ifndef, #ifexist, #ifnexist" />
<keyword value="ifdef" />
<keyword value="#ifndef" />
<keyword value="ifndef" />
<keyword value="#ifexist" />
<keyword value="ifexist" />
<keyword value="#ifnexist" />
<keyword value="ifnexist" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>ifdef-directive:</i>
</td><td> <b>ifdef</b>  &lt;ident&gt; </td></tr></table>
<table><tr><td><i>ifndef-directive:</i>
</td><td> <b>ifndef</b>  &lt;ident&gt; </td></tr></table>
<table><tr><td><i>ifexist-directive:</i>
</td><td> <b>ifexist</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>ifnexist-directive:</i>
</td><td> <b>ifnexist</b>  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p>You can use the <tt>ifdef</tt>, <tt>ifndef</tt>, <tt>ifexist</tt>, and <tt>ifnexist</tt> directives anywhere <tt><link topic="if">if</link></tt> can be used. The <tt>ifdef identifier</tt> statement is equivalent to <tt>if 1</tt> when the specified identifier has been defined, and equivalent to <tt>if 0</tt> when the identifier has not been defined or has been undefined with the <tt><link topic="undef">undef</link></tt> directive. These directives check only for the presence or absence of identifiers defined with <tt><link topic="define">define</link></tt>.</p>
<p><tt>ifexist</tt> and <tt>ifnexist</tt> directives check for presence and absence of the file, respectively.</p>
<heading>Examples</heading>
<p><tt>[Files]<br />#ifexist "myfile.ext"<br />  Filename: "myfile.ext"; DestDir: {app}<br />#endif<br />#ifdef Enterpise<br />  Filename: "extra.dll"; DestDir: {app}<br />#endif<br />
</tt></p>
<heading>See also</heading>
<p><link topic="fileexists">FileExists</link></p>
</body>
</topic>
<topic name="for" title="Inno Setup Preprocessor: #for">
<keyword value="#for" />
<keyword value="for" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>for-directive:</i>
</td><td> <b>for</b>  <b> </b>  <b>{</b>  &lt;expr1&gt;  <b>;</b>  &lt;expr2&gt;  <b>;</b>  &lt;expr3&gt;  <b>}</b>  &lt;expr4&gt; </td></tr></table>
<heading>Description</heading>
<p>Use the <tt>for</tt> directive to get loop behaviour. <tt>for</tt> takes 4 expressions. The first expression (<tt>expr1</tt>) is called "initialization expression," the second expression (<tt>expr2</tt>) "condition," the third expression (<tt>expr3</tt>) "action," and the final expression (<tt>expr4</tt>) "loop body."</p>
<p>The logic the <tt>for</tt> directive follows is:</p>
<p>  1. The initialization expression is evaluated.</p>
<p>  2. The condition is evaluated. If it evaluates to 0, the loop ends.</p>
<p>  3. The loop body is evaluated.</p>
<p>  4. The action is evaluated.</p>
<p>  5. Process repeats from 2.</p>
<heading>Examples</heading>
<p><tt>// Call AddFile user defined procedure 200 times<br />#for {i = 200; i &gt; 0; i--} AddFile<br />
</tt></p>
<heading>More examples</heading>
<p><link topic="findfirst">FindFirst</link>, <link topic="fileread">FileRead</link>.</p>
<heading>See also</heading>
<p><tt><link topic="sub">sub</link></tt>, <tt><link topic="include">include</link></tt>.</p>
</body>
</topic>
<topic name="sub" title="Inno Setup Preprocessor: #sub, #endsub">
<keyword value="#sub, #endsub" />
<keyword value="sub" />
<keyword value="#endsub" />
<keyword value="endsub" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>sub-directive:</i>
</td><td> <b>sub</b>  &lt;ident&gt; </td></tr></table>
<table><tr><td><i>endsub-directive:</i>
</td><td> <b>endsub</b> </td></tr></table>
<heading>Description</heading>
<p><tt>sub</tt> and <tt>endsub</tt> directives are used to declare a user defined procedure which is a portion of script which may be included later once or several times. You may think of a user defined procedure as being similar to an external file, and a call to a user defined procedure as being similar to inclusion of an external file, except that procedures may also be called from within expressions. Please note that it is strongly not recommended to call procedures which emit several lines to the <link topic="translation">preprocessor output</link> from within compound expressions or directives.</p>
<p>A procedure is called by simply specifying its identifier, with which it was declared.</p>
<p>A procedure is not processed in any way until it is called, so if any errors exist in its body, they will only pop up when the procedure is called.</p>
<heading>Examples</heading>
<p><tt>#sub AddFile<br />  #if <link topic="copy">Copy</link>(FileName, 1, 1) == "A"<br />    Source: {#FileName}; DestDir: {app}\A<br />  #else<br />    Source: {#FileName}; DestDir: {app}<br />  #endif<br />#endsub<br />
</tt></p>
<heading>More examples</heading>
<p><link topic="findfirst">FindFirst</link>, <link topic="fileread">FileRead</link>.</p>
<heading>See also</heading>
<p><link topic="macros">User Defined Functions</link>, <tt><link topic="if">if</link></tt>, <tt><link topic="emit">emit</link></tt>.</p>
</body>
</topic>
<topic name="pragma" title="Inno Setup Preprocessor: #pragma">
<keyword value="#pragma" />
<keyword value="pragma" />
<keyword value="option" />
<keyword value="parseroption" />
<keyword value="inlinestart" />
<keyword value="inlineend" />
<keyword value="verboselevel" />
<keyword value="spansymbol" />
<body>
<heading>Syntax</heading>
<table>
<tr>
<td>
<i>pragma-directive:</i></td>
<td> &lt;pragma-option&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;pragma-itokens&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;pragma-msg&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;pragma-verblev&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;pragma-include&gt; </td>
</tr>
<tr>
<td></td>
<td> &lt;pragma-spansymb&gt; </td>
</tr>
</table>
<table><tr><td><i>pragma-option:</i>
</td><td> <b>pragma</b>  (<b>option</b> | <b>parseroption</b>)  <b>-</b>  &lt;letter&gt;  (<b>+</b> | <b>-</b>)   [<b>-</b>  &lt;letter&gt;  (<b>+</b> | <b>-</b>) ]... </td></tr></table>
<table><tr><td><i>pragma-itokens:</i>
</td><td> <b>pragma</b>  (<b>inlinestart</b> | <b>inlineend</b>)  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>pragma-msg:</i>
</td><td> <b>pragma</b>  (<b>message</b> | <b>warning</b> | <b>error</b>)  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>pragma-verblev:</i>
</td><td> <b>pragma verboselevel</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>pragma-include:</i>
</td><td> <b>pragma include</b>  &lt;expr&gt; </td></tr></table>
<table><tr><td><i>pragma-spansymb:</i>
</td><td> <b>pragma spansymbol</b>  &lt;expr&gt; </td></tr></table>
<heading>Description</heading>
<p><tt>pragma</tt> is a special directive. Please note that if ISPP fails to parse parameters of this directive (because of typo or wrong syntax), no error will occur – only a warning will be issued; this is done for compatibility with other preprocessors, which can have their own syntax of <tt>pragma</tt> directive.</p>
<p>First syntax of <tt>pragma</tt> directive controls the options, which ISPP uses to read the source. There are two groups of options. Each group consists of 26 flags (not all of them are meaningful and used by ISPP, though). Each flag has an assigned latin letter. You specify options by typing group name (<tt>option</tt> or <tt>parseroption</tt>),
then the letter following the dash. After a letter, a plus or minus sign shall be specified. Plus sign to turn the option on, minus to turn it off. Unrestricted number of options can be specified at once (see syntax).
The list of options is provided at the end of this topic.</p>
<p>The first group of options (<tt>option</tt>) controls the general options, while the second group (<tt>parseroption</tt>) controls options specific to parser. The list of options is provided at the end of this topic.</p>
<p>Second syntax is used to specify inline directive terminators: starting and ending, respectively. After the token description keyword (<tt>inlinestart</tt> or <tt>inlineend</tt>) a string type expression must follow. It must not evaluate to an empty string. Only first seven symbols from the string are taken. It is allowed to specify the same token for both starting and ending terminators. By default, <tt>{#</tt> (opening brace and a number sign) and <tt>}</tt> (closing brace) are assumed.</p>
<p>Third syntax of <tt>pragma</tt> directive issues a message of the type specified by the keyword following the directive name. Messages and warnings are sent to the messages window of the compiler. Errors are shown (by the compiler) using message boxes. Expression must be of type string. Also see the <tt><link topic="error">error</link></tt> directive.</p>
<p>Fourth syntax turns on verbose mode and sets the level of verbosity which controls the importance of messages (see below). Least important messages will show up only when highest verbose level is set.</p>
<p>Fifth syntax sets the include path. Expression may specify multiple paths delimited with semicolons. The list of these directories is used when ISPP tries to find a file, mentioned in <tt><link topic="include">include</link></tt> directive.</p>
<p>The last syntax sets the symbol used to span multiple lines together. Expression must not evaluate to an empty string. Only first symbol in string is taken.</p>
<heading>ISPP options</heading>
<table><tr><td>c</td>
<td>Indicates that the <link topic="translation">preprocessor output</link> should be sent to the compiler after preprocessing is done. Default state: on.</td>
</tr>
<tr><td>e</td>
<td>Specifies whether empty lines or lines with only whitespace should be emitted to the <link topic="translation">preprocessor output</link>. Default state: on.</td>
</tr>
<tr><td>v</td>
<td>Turns on/off the verbose mode. Default state: off.</td>
</tr>
</table>
<heading>Parser options</heading>
<table><tr><td>b</td>
<td>Short-circuit boolean evaluation. Default state: on.</td>
</tr>
<tr><td>m</td>
<td>Short-circuit multiplication evaluation. (In "<tt>0 * A</tt>", <tt>A</tt> will not be evaluated, since the result of expression is known to be zero.) Default state: off.</td>
</tr>
<tr><td>p</td>
<td>Pascal-style string literals. In off state, uses C-style string literals (with escape sequences). Default state: on.</td>
</tr>
<tr><td>u</td>
<td>Allow undeclared identifiers. If an undefined identifier is encountered, ISPP will raise an error unless this option is turned on, in which case a standalone identifier (the one that does not look like a function call) will be considered void value. Default state: off.</td>
</tr>
</table>
<heading>Verbose levels</heading>
<table><tr><td>0</td>
<td>Verbosity level messages</td>
</tr>
<tr><td>1</td>
<td>Messages about any temporary files created by #file</td>
</tr>
<tr><td>2</td>
<td>#insert and #append messages</td>
</tr>
<tr><td>4</td>
<td>#dim, #define and #undef messages</td>
</tr>
<tr><td>6</td>
<td>Conditional inclusion messages</td>
</tr>
<tr><td>8</td>
<td>#emit messages</td>
</tr>
<tr><td>9</td>
<td>Macro and functions call messages</td>
</tr>
<tr><td>10</td>
<td><tt>Local</tt> macro array allocation messages</td>
</tr>
</table>
<heading>Examples</heading>
<p><tt>#pragma parseroption -b- -u+<br />#pragma option -c-<br />#pragma warning "Variable value is: " + Str(MyVar)<br />#pragma option -v+<br />#pragma verboselevel 9<br />#pragma inlinestart "$("<br />#pragma inlineend ")"<br />#pragma include __INCLUDE__ + ";D:\INCLUDE"<br />#pragma spansymbol "_"<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="message">Message</link></tt>, <tt><link topic="warning">Warning</link></tt>, <tt><link topic="error2">Error</link></tt>.</p>
</body>
</topic>
<topic name="error" title="Inno Setup Preprocessor: #error">
<keyword value="#error" />
<keyword value="error" />
<body>
<heading>Syntax</heading>
<table><tr><td><i>error-directive:</i>
</td><td> <b>error</b>  &lt;text&gt; </td></tr></table>
<heading>Description</heading>
<p>Causes the Inno Setup compiler to issue an error message with the specified text. Unlike <tt>pragma error</tt>, text in <tt>error</tt> directive is not parsed, so it is recommended to use this directive instead of <tt><link topic="pragma">pragma</link></tt> when possible to avoid possible syntax errors that may hide real errors your script is trying to report.</p>
<heading>Examples</heading>
<p><tt>#if <link topic="predefinedvars">VER</link> &lt; EncodeVer(5,4,2)<br />  #error A more recent version of Inno Setup is required to compile this script (5.4.2 or newer)<br />#endif<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="pragma">pragma</link></tt>, <tt><link topic="if">if</link></tt>, <tt><link topic="error2">Error</link></tt>.</p>
</body>
</topic>
<topic name="funcs" title="Inno Setup Preprocessor: Support Functions Reference">
<keyword value="Support Functions Reference" />
<body>
<p>There are a number of built-in support functions which you can use to perform compile-time actions and/or change your script. For example the following uses ISPP function <link topic="getversionnumbersstring">GetVersionNumbersString</link> to read version info from an EXE and uses the return value of the function to set the <extlink href="ms-its:isetup.chm::/topic_setup_appvername.htm">AppVerName</extlink> [Setup] section directive using ISPP directive <tt><link topic="emit">emit</link></tt>:</p>
<p><tt>#define MyAppVer GetVersionNumbersString(AddBackslash(SourcePath) + "MyProg.exe")<br />
<br />[Setup]<br />AppVerName=MyProg version {#MyAppVer}<br />
</tt></p>
<heading>Function prototypes documenting conventions</heading>
<p>Function prototypes show the function result type, name, and arguments.</p>
<p>Return and argument types <tt>int</tt>, <tt>str</tt>, <tt>any</tt>, and <tt>void</tt> respectively specify the integer type, the string type, any type, and the null type. The integer type is a signed 64-bit integer. When the null type is specified as a function result type then the function does not return a value.</p>
<p>A question mark (<tt>?</tt>) after an argument type means that the argument is optional.</p>
<heading>Available functions</heading>
<ul>
<li><link topic="getstringfileinfo">GetStringFileInfo</link></li>
<li><link topic="int">Int</link></li>
<li><link topic="str">Str</link></li>
<li><link topic="fileexists">FileExists</link></li>
<li><link topic="direxists">DirExists</link></li>
<li><link topic="forcedirectories">ForceDirectories</link></li>
<li><link topic="filesize">FileSize</link></li>
<li><link topic="readini">ReadIni</link></li>
<li><link topic="writeini">WriteIni</link></li>
<li><link topic="readreg">ReadReg</link></li>
<li><link topic="exec">Exec</link></li>
<li><link topic="copy">Copy</link></li>
<li><link topic="pos">Pos</link></li>
<li><link topic="rpos">RPos</link></li>
<li><link topic="len">Len</link></li>
<li><link topic="savetofile">SaveToFile</link></li>
<li><link topic="find">Find</link></li>
<li><link topic="setupsetting">SetupSetting</link></li>
<li><link topic="setsetupsetting">SetSetupSetting</link></li>
<li><link topic="lowercase">LowerCase</link></li>
<li><link topic="uppercase">UpperCase</link></li>
<li><link topic="entrycount">EntryCount</link></li>
<li><link topic="getenv">GetEnv</link></li>
<li><link topic="deletefile">DeleteFile</link></li>
<li><link topic="deletefilenow">DeleteFileNow</link></li>
<li><link topic="copyfile">CopyFile</link></li>
<li><link topic="findfirst">FindFirst</link></li>
<li><link topic="findnext">FindNext</link></li>
<li><link topic="findclose">FindClose</link></li>
<li><link topic="findgetfilename">FindGetFileName</link></li>
<li><link topic="fileopen">FileOpen</link></li>
<li><link topic="fileread">FileRead</link></li>
<li><link topic="filereset">FileReset</link></li>
<li><link topic="fileeof">FileEof</link></li>
<li><link topic="fileclose">FileClose</link></li>
<li><link topic="savestringtofile">SaveStringToFile</link></li>
<li><link topic="getdatetimestring">GetDateTimeString</link></li>
<li><link topic="getfiledatetimestring">GetFileDateTimeString</link></li>
<li><link topic="getmd5ofstring">GetMD5OfString</link></li>
<li><link topic="getmd5ofunicodestring">GetMD5OfUnicodeString</link></li>
<li><link topic="getmd5offile">GetMD5OfFile</link></li>
<li><link topic="getsha1ofstring">GetSHA1OfString</link></li>
<li><link topic="getsha1ofunicodestring">GetSHA1OfUnicodeString</link></li>
<li><link topic="getsha1offile">GetSHA1OfFile</link></li>
<li><link topic="trim">Trim</link></li>
<li><link topic="stringchange">StringChange</link></li>
<li><link topic="iswin64">IsWin64</link></li>
<li><link topic="defined">Defined</link></li>
<li><link topic="typeof">TypeOf</link></li>
<li><link topic="dimof">DimOf</link></li>
<li><link topic="getversionnumbers">GetVersionNumbers</link></li>
<li><link topic="getversioncomponents">GetVersionComponents</link></li>
<li><link topic="getversionnumbersstring">GetVersionNumbersString</link></li>
<li><link topic="getpackedversion">GetPackedVersion</link></li>
<li><link topic="packversionnumbers">PackVersionNumbers</link></li>
<li><link topic="packversioncomponents">PackVersionComponents</link></li>
<li><link topic="comparepackedversion">ComparePackedVersion</link></li>
<li><link topic="samepackedversion">SamePackedVersion</link></li>
<li><link topic="unpackversionnumbers">UnpackVersionNumbers</link></li>
<li><link topic="unpackversioncomponents">UnpackVersionComponents</link></li>
<li><link topic="versiontostr">VersionToStr</link></li>
<li><link topic="strtoversion">StrToVersion</link></li>
<li><link topic="encodever">EncodeVer</link></li>
<li><link topic="decodever">DecodeVer</link></li>
<li><link topic="findsection">FindSection</link></li>
<li><link topic="findsectionend">FindSectionEnd</link></li>
<li><link topic="findcode">FindCode</link></li>
<li><link topic="extractfilepath">ExtractFilePath</link></li>
<li><link topic="extractfiledir">ExtractFileDir</link></li>
<li><link topic="extractfileext">ExtractFileExt</link></li>
<li><link topic="extractfilename">ExtractFileName</link></li>
<li><link topic="changefileext">ChangeFileExt</link></li>
<li><link topic="removefileext">RemoveFileExt</link></li>
<li><link topic="addbackslash">AddBackslash</link></li>
<li><link topic="removebackslash">RemoveBackslash</link></li>
<li><link topic="delete">Delete</link></li>
<li><link topic="insert2">Insert</link></li>
<li><link topic="yesno">YesNo</link></li>
<li><link topic="power">Power</link></li>
<li><link topic="min">Min</link></li>
<li><link topic="max">Max</link></li>
<li><link topic="sametext">SameText</link></li>
<li><link topic="samestr">SameStr</link></li>
<li><link topic="message">Message</link></li>
<li><link topic="warning">Warning</link></li>
<li><link topic="error2">Error</link></li>
</ul>
</body>
</topic>
<topic name="getstringfileinfo" title="Inno Setup Preprocessor: GetStringFileInfo">
<keyword value="GetStringFileInfo" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetStringFileInfo(<b>str</b> 1, <b>str</b> 2, <b>int</b>? 3)<br />
</tt></p>
<heading>Description</heading>
<p>Retrieves string from specified file's (first argument) version information resource.</p>
<p>Second argument is the name of the version info string-value. This should be one of the predefined strings. Those strings and shortcuts are declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<p>Third optional argument should specify the language and charset identifier. For example: 0x04BE0409 stands for "English (United States)." If this parameter is omitted, ISPP scans for all available version info blocks to find the value.</p>
<p>The function returns an empty string, if it was unable to retrieve the desired string-value.</p>
</body>
</topic>
<topic name="int" title="Inno Setup Preprocessor: Int">
<keyword value="Int" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Int(<b>any</b> 1, <b>int</b>? 2)<br />
</tt></p>
<heading>Description</heading>
<p>Converts an expression (first argument) to its integer representation. If the expression is an integer, the result of the function is the expression value. If the expression is void, the result is 0. If the expression is string, ISPP tries to convert it to integer; if such attempt fails, an error is raised unless second parameter specifies the default result.</p>
</body>
</topic>
<topic name="str" title="Inno Setup Preprocessor: Str">
<keyword value="Str" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> Str(<b>any</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Converts an expression to string. If the expression is integer, the result is its string representation. If the expression is void, the result is an empty string. Otherwise the result is the value of the expression.</p>
</body>
</topic>
<topic name="fileexists" title="Inno Setup Preprocessor: FileExists">
<keyword value="FileExists" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FileExists(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns non-zero value if the specified file exists.</p>
</body>
</topic>
<topic name="direxists" title="Inno Setup Preprocessor: DirExists">
<keyword value="DirExists" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> DirExists(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns non-zero value if the specified directory exists.</p>
</body>
</topic>
<topic name="forcedirectories" title="Inno Setup Preprocessor: ForceDirectories">
<keyword value="ForceDirectories" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> ForceDirectories(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Creates all the directories along the specified directory path all at once. If the first directories in the path do exist, but the latter ones don't, ForceDirectories creates just the ones that don't exist. Returns non-zero value if successful.</p>
</body>
</topic>
<topic name="filesize" title="Inno Setup Preprocessor: FileSize">
<keyword value="FileSize" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FileSize(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns size, in bytes, of the specified file. If the file does not exist, the result is -1.</p>
</body>
</topic>
<topic name="readini" title="Inno Setup Preprocessor: ReadIni">
<keyword value="ReadIni" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ReadIni(<b>str</b> 1, <b>str</b> 2, <b>str</b> 3, <b>str</b>? 4)<br />
</tt></p>
<heading>Description</heading>
<p>Reads the value from an INI file. Argument 1 must be the name of the INI file, argument 2 – the name of a section in the INI file, the third argument is the key in the section to read. Last optional argument can be used to provide the default value that will be returned on failure, if it is omitted, an empty string is returned.</p>
</body>
</topic>
<topic name="writeini" title="Inno Setup Preprocessor: WriteIni">
<keyword value="WriteIni" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> WriteIni(<b>str</b> 1, <b>str</b> 2, <b>str</b> 3, <b>any</b> 4)<br />
</tt></p>
<heading>Description</heading>
<p>Writes specified value to an INI file. Argument 1 is the name of the INI file, argument 2 – the name of a section in the INI file, argument 3 – the name of a key in the section. Last argument should be set to the value you wish to be written to the INI file, it can be of any type.</p>
</body>
</topic>
<topic name="readreg" title="Inno Setup Preprocessor: ReadReg">
<keyword value="ReadReg" />
<body>
<heading>Prototype</heading>
<p><tt><b>any</b> ReadReg(<b>int</b> 1, <b>str</b> 2, <b>str</b>? 3, <b>any</b>? 4)<br />
</tt></p>
<heading>Description</heading>
<p>Reads the value of the specified key in the 32-bit or 64-bit system registry. First parameter is the root key, such as HKEY_LOCAL_MACHINE (32-bit) or HKEY_LOCAL_MACHINE_64 (64-bit). Constants for use with this parameter are declared in <link topic="builtinsiss">ISPPBuiltins.iss</link> accompanying ISPP. Second parameter specifies a subkey. Third parameter specifies the name of the value, if this parameter is omitted, a default value is assumed. Last optional parameter may be used to specify the default value that will be returned on failure.</p>
<p>Note that this function can return a value of any type depending on the type of actual value in the registry.</p>
</body>
</topic>
<topic name="exec" title="Inno Setup Preprocessor: Exec">
<keyword value="Exec" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Exec(<b>str</b> 1, <b>str</b>? 2, <b>str</b>? 3, <b>int</b>? 4, <b>int</b>? 5)<br />
</tt></p>
<heading>Description</heading>
<p>Executes specified executable file.</p>
<p>First argument specifies the filename of the module to execute.</p>
<p>Second argument may be used to specify command line to execute.</p>
<p>Third argument may be used to specify the working directory of the process.</p>
<p>Fourth argument should be set to zero, if you don't wish to wait for the process to finish, and non-zero otherwise. By default, non-zero value is assumed.</p>
<p>Fifth argument can be any of the <tt>SW_*</tt> constants defined in <link topic="builtinsiss">ISPPBuiltins.iss</link>. For GUI processes, it specifies the default value the first time ShowWindow is called. By default, SW_SHOWNORMAL (i. e. 1) is assumed.</p>
<p>If fourth argument is omitted or is non-zero, the function returns the exit code of the process. Otherwise, the function result indicates whether the process has been successfully launched (non-zero for success).</p>
</body>
</topic>
<topic name="copy" title="Inno Setup Preprocessor: Copy">
<keyword value="Copy" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> Copy(<b>str</b> 1, <b>int</b> 2, <b>int</b>? 3)<br />
</tt></p>
<heading>Description</heading>
<p>Extracts a substring from a string (first argument). The 1-based index of the character from which the substring should start is specified by the second argument. The third argument specifies the number of characters to take, if it is omitted, all characters up to the end of the string are copied to the result.</p>
</body>
</topic>
<topic name="pos" title="Inno Setup Preprocessor: Pos">
<keyword value="Pos" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Pos(<b>str</b> 1, <b>str</b> 2)<br />
</tt></p>
<heading>Description</heading>
<p>Searches for a substring (first argument) in another string (second argument) and returns an integer value that is the 1-based index of the first character of the substring within the second string. <tt>Pos</tt> is case-sensitive. If the substring is not found, <tt>Pos</tt> returns zero.</p>
</body>
</topic>
<topic name="rpos" title="Inno Setup Preprocessor: RPos">
<keyword value="RPos" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> RPos(<b>str</b> 1, <b>str</b> 2)<br />
</tt></p>
<heading>Description</heading>
<p>Searches for a substring (first argument) in another string (second argument) and returns an integer value that is the 1-based index of the first character of the last occurrence of the substring within the second string. <tt>RPos</tt> is case-sensitive. If the substring is not found, <tt>RPos</tt> returns zero.</p>
</body>
</topic>
<topic name="len" title="Inno Setup Preprocessor: Len">
<keyword value="Len" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Len(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the length of the given string.</p>
</body>
</topic>
<topic name="savetofile" title="Inno Setup Preprocessor: SaveToFile">
<keyword value="SaveToFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> SaveToFile(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Saves <link topic="current-translation">current preprocessor output</link> to the specified file.</p>
</body>
</topic>
<topic name="find" title="Inno Setup Preprocessor: Find">
<keyword value="Find" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Find(<b>int</b> 1, <b>str</b> 2, <b>int</b>? 3, <b>str</b>? 4, <b>int</b>? 5, <b>str</b>? 6, <b>int</b>? 7)<br />
</tt></p>
<heading>Description</heading>
<p>Intended to be used with <tt><link topic="insert">insert</link></tt> directive: returns the index of the line in the <link topic="translation">preprocessor output</link> depending on specified criteria.</p>
<p>First parameter denotes the index of the line to start the search from, usually it is set to zero.</p>
<p>Second, fourth, and sixth parameters should specify string(s) to search within each line. Only the second parameter must be specified, whereas fourth and sixth may be omitted.</p>
<p>Third, fifth, and seventh parameters should specify the search flags for each string meaning that third parameter specifies flags for second, fifth for fourth, and seventh for sixth.</p>
<p>If any of the 'flags' parameters is omitted but the string parameter preceding it is specified, <tt>FIND_MATCH | FIND_AND</tt> (i. e. 0) is assumed.</p>
<p>Values for third, fifth, and seventh parameters of <tt>Find</tt> function are declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>. See <link topic="find-flags">Find flags</link> topic for the description of each value.</p>
<heading>See also</heading>
<p><tt><link topic="insert">insert</link></tt>.</p>
<heading></heading>
<ul>
<li><link topic="find-flags">Find flags</link></li>
</ul>
</body>
</topic>
<topic name="find-flags" title="Inno Setup Preprocessor: Find flags">
<keyword value="Find flags" />
<body>
<heading>Description</heading>
<p>One of the following four values must be specified:</p>
<p><tt>FIND_MATCH</tt> (0) means that the line must match the search string.</p>
<p><tt>FIND_BEGINS</tt> (1) means that the line must start with the search string.</p>
<p><tt>FIND_ENDS</tt> (2) means that the line must end with the search string.</p>
<p><tt>FIND_CONTAINS</tt> (3) means that the line must contain (i. e. it also can match, begin, or end with) the search string.</p>
<p>Any of the following modifiers may be combined with one of the previous using bitwise OR operator (<tt>|</tt>):</p>
<p><tt>FIND_CASESENSITIVE</tt> (4) means that comparison must be case-sensitive.</p>
<p><tt>FIND_AND</tt> (0) means that this criterium (the pair of arguments in <tt>Find</tt> function) must be met as well as previous criteria.</p>
<p><tt>FIND_OR</tt> (8) means that it is allowed that this criterium is tested even if previous criteria were not met.</p>
<p><tt>FIND_NOT</tt> (16) means that this criterium must not be met.</p>
<p><tt>FIND_AND</tt> and <tt>FIND_OR</tt> are mutually exclusive. If both are specified, <tt>FIND_OR</tt> takes precedence.</p>
<p>Special flags:</p>
<p><tt>FIND_TRIM</tt> (32) means that leading and trailing whitespaces must be stripped off from the line prior to testing it against all the criteria. This flag can only be used in the third argument of the <tt>Find</tt> function. It is not mutually exclusive with any of the previously mentioned flags.</p>
</body>
</topic>
<topic name="setupsetting" title="Inno Setup Preprocessor: SetupSetting">
<keyword value="SetupSetting" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> SetupSetting(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Parses <extlink href="ms-its:isetup.chm::/topic_setupsection.htm">[Setup] section</extlink> in <link topic="current-translation">current preprocessor output</link> to find the key whose name is specified as function parameter. Function returns the value of that key if it's found, or an empty string otherwise.</p>
</body>
</topic>
<topic name="setsetupsetting" title="Inno Setup Preprocessor: SetSetupSetting">
<keyword value="SetSetupSetting" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> SetSetupSetting(<b>str</b> 1, <b>str</b> 2)<br />
</tt></p>
<heading>Description</heading>
<p>Modifies or generates [Setup] section directive given the key (first parameter) and its value (second parameter).</p>
<p>If there is no [Setup] section in <link topic="current-translation">current preprocessor output</link> (it may happen that function is called before that section in a script), its header (as well as directive itself) is generated by this function.</p>
<p>Please use this function carefully – it should not be called when ISPP is in insert mode (i. e. after <tt><link topic="insert">insert</link></tt> directive).</p>
</body>
</topic>
<topic name="lowercase" title="Inno Setup Preprocessor: LowerCase">
<keyword value="LowerCase" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> LowerCase(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns a string with the same text as the string passed in its parameter, but with all letters converted to lowercase. The conversion affects only 7-bit ASCII characters between 'A' and 'Z'.</p>
</body>
</topic>
<topic name="uppercase" title="Inno Setup Preprocessor: UpperCase">
<keyword value="UpperCase" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> UpperCase(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns a string with the same text as the string passed in its parameter, but with all letters converted to uppercase. The conversion affects only 7-bit ASCII characters between 'A' and 'Z'.</p>
</body>
</topic>
<topic name="entrycount" title="Inno Setup Preprocessor: EntryCount">
<keyword value="EntryCount" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> EntryCount(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the total number of entries in specified section in <link topic="current-translation">current preprocessor output</link>. It does not count empty lines or comments. Function takes care of multiple sections with the same name and counts all of them.</p>
</body>
</topic>
<topic name="getenv" title="Inno Setup Preprocessor: GetEnv">
<keyword value="GetEnv" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetEnv(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the value of the environment variable whose name is specified as the parameter. Returns an empty string if the variable is not defined.</p>
</body>
</topic>
<topic name="deletefile" title="Inno Setup Preprocessor: DeleteFile">
<keyword value="DeleteFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> DeleteFile(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Marks the specified file for deletion after the compilation has completed. Does not return anything. Also see <tt><link topic="deletefilenow">DeleteFileNow</link></tt>.</p>
</body>
</topic>
<topic name="deletefilenow" title="Inno Setup Preprocessor: DeleteFileNow">
<keyword value="DeleteFileNow" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> DeleteFileNow(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Deletes the specified file. Does not return anything. Also see <tt><link topic="deletefile">DeleteFile</link></tt>.</p>
</body>
</topic>
<topic name="copyfile" title="Inno Setup Preprocessor: CopyFile">
<keyword value="CopyFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> CopyFile(<b>str</b> 1, <b>str</b> 2)<br />
</tt></p>
<heading>Description</heading>
<p>Copies an existing file (first parameter) to a new file (second parameter). If the new file already exists, it will be overwritten.</p>
</body>
</topic>
<topic name="findfirst" title="Inno Setup Preprocessor: FindFirst">
<keyword value="FindFirst" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FindFirst(<b>str</b>, <b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Searches the directory specified by first parameter for the first file that matches the file name implied by first parameter and the attributes specified by second parameter. If the file is found, the result is a find handle, that should be used in subsequent calls to <tt><link topic="findgetfilename">FindGetFileName</link></tt>, <tt><link topic="findnext">FindNext</link></tt>, and <tt><link topic="findclose">FindClose</link></tt> functions, otherwise the return value is 0.</p>
<p>The first parameter is the directory and file name mask, including wildcard characters. For example, <tt>'.\*.*'</tt> specifies all files in the current directory).</p>
<p>The second parameter specifies the special files to include in addition to all normal files. Choose from these file attribute constants defined in <link topic="builtinsiss">ISPPBuiltins.iss</link> when specifying this parameter:</p>
<table><tr><td><tt>faReadOnly</tt>
</td>
<td>Read-only files</td>
</tr>
<tr><td><tt>faHidden</tt>
</td>
<td>Hidden files</td>
</tr>
<tr><td><tt>faSysFile</tt>
</td>
<td>System files</td>
</tr>
<tr><td><tt>faVolumeID</tt>
</td>
<td>Volume ID files</td>
</tr>
<tr><td><tt>faDirectory</tt>
</td>
<td>Directory files</td>
</tr>
<tr><td><tt>faArchive</tt>
</td>
<td>Archive files</td>
</tr>
<tr><td><tt>faAnyFile</tt>
</td>
<td>Any file</td>
</tr>
</table>
<p>Attributes can be combined by OR-ing their constants or values. For example, to search for read-only and hidden files in addition to normal files, pass <tt>faReadOnly | faHidden</tt> as the parameter.</p>
<heading>Example</heading>
<p><tt>[Files]<br />#define FindHandle<br />#define FindResult<br />#define Mask "*.pas"<br />
<br />#sub ProcessFoundFile<br />  #define FileName FindGetFileName(FindHandle)<br />  #if LowerCase(Copy(FileName, 1, 4)) == "ispp"<br />    Source: {#FileName}; DestDir: {app}\ispp<br />  #else<br />    Source: {#FileName}; DestDir: {app}<br />  #endif<br />#endsub<br />
<br />#for {FindHandle = FindResult = FindFirst(Mask, 0); FindResult; FindResult = FindNext(FindHandle)} ProcessFoundFile<br />#if FindHandle<br />  #expr FindClose(FindHandle)<br />#endif<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="define">define</link></tt>, <tt><link topic="sub">sub</link></tt>, <tt><link topic="if">if</link></tt>.</p>
</body>
</topic>
<topic name="findnext" title="Inno Setup Preprocessor: FindNext">
<keyword value="FindNext" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FindNext(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the next entry that matches the name and attributes specified in a previous call to <tt><link topic="findfirst">FindFirst</link></tt>. The parameter must be a find handle returned by <tt>FindFirst</tt>. The return value is non-zero if the function was successful.</p>
</body>
</topic>
<topic name="findclose" title="Inno Setup Preprocessor: FindClose">
<keyword value="FindClose" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> FindClose(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Terminates a <tt><link topic="findfirst">FindFirst</link></tt>/<tt><link topic="findnext">FindNext</link></tt> sequence. The parameter must be a non-zero find handle returned by <tt>FindFirst</tt>.</p>
<p>This function is obsolete since 1.2. ISPP automatically frees resources allocated in a call to <tt>FindFirst</tt>.</p>
</body>
</topic>
<topic name="findgetfilename" title="Inno Setup Preprocessor: FindGetFileName">
<keyword value="FindGetFileName" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> FindGetFileName(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Feed <tt>FindGetFileName</tt> with the find handle returned by <tt><link topic="findfirst">FindFirst</link></tt> to get the name of the file found by the last call to <tt>FindFirst</tt> or <tt><link topic="findnext">FindNext</link></tt>.</p>
</body>
</topic>
<topic name="fileopen" title="Inno Setup Preprocessor: FileOpen">
<keyword value="FileOpen" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FileOpen(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Opens a text file for reading and returns the file handle (or zero on failure) to be used in subsequent calls to <tt>File*</tt> functions.</p>
</body>
</topic>
<topic name="fileread" title="Inno Setup Preprocessor: FileRead">
<keyword value="FileRead" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> FileRead(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Reads the next line in a text file opened with <tt><link topic="fileopen">FileOpen</link></tt>. The only parameter should be the file handle returned by <tt>FileOpen</tt>.</p>
<heading>Example</heading>
<p><tt>#define FileHandle<br />#define FileLine<br />#sub ProcessFileLine<br />  #define FileLine = FileRead(FileHandle)<br />  #pragma message FileLine<br />#endsub<br />#for {FileHandle = FileOpen("c:\autoexec.bat"); \<br />  FileHandle &amp;&amp; !<link topic="fileeof">FileEof</link>(FileHandle); ""}
							\<br />  ProcessFileLine<br />#if FileHandle<br />  #expr <link topic="fileclose">FileClose</link>(FileHandle)<br />#endif<br />
</tt></p>
<heading>See also</heading>
<p><tt><link topic="define">define</link></tt>, <tt><link topic="sub">sub</link></tt>, <tt><link topic="pragma">pragma</link></tt>, <tt><link topic="for">for</link></tt>, <tt><link topic="if">if</link></tt>.</p>
</body>
</topic>
<topic name="filereset" title="Inno Setup Preprocessor: FileReset">
<keyword value="FileReset" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> FileReset(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Resets the file pointer to zero, so the subsequent call to <tt><link topic="fileread">FileRead</link></tt> will read the first line of the file. The only parameter should be the file handle returned by <tt><link topic="fileopen">FileOpen</link></tt>.</p>
</body>
</topic>
<topic name="fileeof" title="Inno Setup Preprocessor: FileEof">
<keyword value="FileEof" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FileEof(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns zero if the file pointer does not point to the end of the file, or non-zero otherwise. If this function returns non-zero value, subsequent calls to <tt><link topic="fileread">FileRead</link></tt> will fail. The only parameter should be the file handle returned by <tt><link topic="fileopen">FileOpen</link></tt>.</p>
</body>
</topic>
<topic name="fileclose" title="Inno Setup Preprocessor: FileClose">
<keyword value="FileClose" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> FileClose(<b>int</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Closes a file opened using <tt><link topic="fileopen">FileOpen</link></tt>. After calling <tt>FileClose</tt>, the file handle becomes invalid.</p>
<p>Note: opened files which are not closed using this function will be automatically closed after the script has been preprocessed.</p>
</body>
</topic>
<topic name="savestringtofile" title="Inno Setup Preprocessor: SaveStringToFile">
<keyword value="SaveStringToFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> SaveStringToFile(<b>str</b> Filename, <b>str</b> S, <b>int</b>? Append, <b>int</b>? UTF8)<br />
</tt></p>
<heading>Description</heading>
<p>Saves the specified string to the specified file. If Append is True or ommitted and the specified file already exists, it will be appended to instead of overwritten. If UTF8 is True or ommitted, the string will be saved with UTF8 encoding instead of ASCII encoding. Returns True if successful, or False otherwise.</p>
<p>This function does not automatically write a line break before or after the string. If Append is True or ommitted and the existing file did not end in a line break, the function will effectively append to the existing last line. To avoid this you can put line break characters (using <tt><link topic="predefinedvars">NewLine</link></tt>) before and/or after your string.</p>
<heading>Example</heading>
<p><tt>#expr SaveStringToFile('c:\filename.txt', NewLine + 'the string' + NewLine)<br />
</tt></p>
</body>
</topic>
<topic name="getdatetimestring" title="Inno Setup Preprocessor: GetDateTimeString">
<keyword value="GetDateTimeString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetDateTimeString(<b>str</b>, <b>str</b>, <b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the current date and time as a string using the specified formatting.</p>
<p>The first parameter is the format string. The second and third parameters denote the DateSeparator and TimeSeparator parameters explained below.</p>
<p>The following format specifiers are supported:</p>
<table><tr><td>d</td>
<td>Displays the day as a number without a leading zero (1-31).</td>
</tr>
<tr><td>dd</td>
<td>Displays the day as a number with a leading zero (01-31).</td>
</tr>
<tr><td>ddd</td>
<td>Displays the day as an abbreviation (Sun-Sat).</td>
</tr>
<tr><td>dddd</td>
<td>Displays the day as a full name (Sunday-Saturday).</td>
</tr>
<tr><td>ddddd</td>
<td>Displays the date using the system's short date format.</td>
</tr>
<tr><td>dddddd</td>
<td>Displays the date using the system's long date format.</td>
</tr>
<tr><td>m</td>
<td>Displays the month as a number without a leading zero (1-12). If the m specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</td>
</tr>
<tr><td>mm</td>
<td>Displays the month as a number with a leading zero (01-12). If the mm specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</td>
</tr>
<tr><td>mmm</td>
<td>Displays the month as an abbreviation (Jan-Dec).</td>
</tr>
<tr><td>mmmm</td>
<td>Displays the month as a full name (January-December).</td>
</tr>
<tr><td>yy</td>
<td>Displays the year as a two-digit number (00-99).</td>
</tr>
<tr><td>yyyy</td>
<td>Displays the year as a four-digit number (0000-9999).</td>
</tr>
<tr><td>h</td>
<td>Displays the hour without a leading zero (0-23).</td>
</tr>
<tr><td>hh</td>
<td>Displays the hour with a leading zero (00-23).</td>
</tr>
<tr><td>n</td>
<td>Displays the minute without a leading zero (0-59).</td>
</tr>
<tr><td>nn</td>
<td>Displays the minute with a leading zero (00-59).</td>
</tr>
<tr><td>s</td>
<td>Displays the second without a leading zero (0-59).</td>
</tr>
<tr><td>ss</td>
<td>Displays the second with a leading zero (00-59).</td>
</tr>
<tr><td>t</td>
<td>Displays the time using the system's short time format.</td>
</tr>
<tr><td>tt</td>
<td>Displays the time using the system's long time format.</td>
</tr>
<tr><td>am/pm</td>
<td>Uses the 12-hour clock for the preceding h or hh specifier. Displays 'am' for any hour before noon, and 'pm' for any hour after noon. The am/pm specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</td>
</tr>
<tr><td>a/p</td>
<td>Uses the 12-hour clock for the preceding h or hh specifier. Displays 'a' for any hour before noon, and 'p' for any hour after noon. The a/p specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</td>
</tr>
<tr><td>/</td>
<td>Displays the date separator character given by the DateSeparator parameter. If DateSeparator is set to an empty string, the system's date separator character will be used instead.</td>
</tr>
<tr><td>:</td>
<td>Displays the time separator character given by the TimeSeparator parameter. If TimeSeparator is set to an empty string, the system's time separator character will be used instead.</td>
</tr>
<tr><td>'xx'/"xx"</td>
<td>Characters enclosed in single or double quotes are displayed as-is, and do not affect formatting.</td>
</tr>
</table>
<p>Format specifiers may be written in upper case as well as in lower case letters--both produce the same result.</p>
<heading>Example</heading>
<p><tt>#define MyDateTimeString GetDateTimeString('ddddd', '', '')<br />#define MyDateTimeString GetDateTimeString('ddddd tt', '', '')<br />#define MyDateTimeString GetDateTimeString('dd/mm/yyyy hh:nn:ss', '-', ':')<br />
</tt></p>
</body>
</topic>
<topic name="getfiledatetimestring" title="Inno Setup Preprocessor: GetFileDateTimeString">
<keyword value="GetFileDateTimeString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetFileDateTimeString(<b>str</b>, <b>str</b>, <b>str</b>, <b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the date and time of the specified file as a string using the specified formatting.</p>
<p>The first parameter is the file name. The second, third and fourth parameters denote the format string, DateSeparator and TimeSeparator parameters as explained in the <link topic="getdatetimestring">GetDateTimeString</link> topic.</p>
<heading>Example</heading>
<p><tt>#define MyFileDateTimeString GetFileDateTimeString('myfile.txt', 'dd/mm/yyyy hh:nn:ss', '-', ':');<br />
</tt></p>
</body>
</topic>
<topic name="getmd5ofstring" title="Inno Setup Preprocessor: GetMD5OfString">
<keyword value="GetMD5OfString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetMD5OfString(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the MD5 sum of the specified ANSI string, as a string.</p>
<heading>Example</heading>
<p><tt>#define MD5 GetMD5OfString('Test')<br />// MD5 = '0cbc6611f5540bd0809a388dc95a615b'<br />
</tt></p>
</body>
</topic>
<topic name="getmd5ofunicodestring" title="Inno Setup Preprocessor: GetMD5OfUnicodeString">
<keyword value="GetMD5OfUnicodeString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetMD5OfString(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the MD5 sum of the specified Unicode string, as a string.</p>
<p>Causes an internal error if called during non Unicode compilation.</p>
<heading>Example</heading>
<p><tt>#define MD5 GetMD5OfUnicodeString('Test')<br />// MD5 = '8e06915d5f5d4f8754f51892d884c477'<br />
</tt></p>
</body>
</topic>
<topic name="getmd5offile" title="Inno Setup Preprocessor: GetMD5OfFile">
<keyword value="GetMD5OfFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetMD5OfFile(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the MD5 sum of the specified file, as a string.</p>
</body>
</topic>
<topic name="getsha1ofstring" title="Inno Setup Preprocessor: GetSHA1OfString">
<keyword value="GetSHA1OfString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetSHA1OfString(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the SHA-1 hash of the specified ANSI string, as a string.</p>
</body>
</topic>
<topic name="getsha1ofunicodestring" title="Inno Setup Preprocessor: GetSHA1OfUnicodeString">
<keyword value="GetSHA1OfUnicodeString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetSHA1OfString(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the SHA-1 hash of the specified Unicode string, as a string.</p>
<p>Causes an internal error if called during non Unicode compilation.</p>
</body>
</topic>
<topic name="getsha1offile" title="Inno Setup Preprocessor: GetSHA1OfFile">
<keyword value="GetSHA1OfFile" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetSHA1OfFile(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the SHA-1 hash of the specified file, as a string.</p>
</body>
</topic>
<topic name="trim" title="Inno Setup Preprocessor: Trim">
<keyword value="Trim" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> Trim(<b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns a copy of the specified string without leading and trailing spaces.</p>
</body>
</topic>
<topic name="stringchange" title="Inno Setup Preprocessor: StringChange">
<keyword value="StringChange" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> StringChange(<b>str</b>, <b>str</b>, <b>str</b>)<br />
</tt></p>
<heading>Description</heading>
<p>Returns a copy of the first string, with all occurrences of the second string changed to the third string.</p>
<heading>Example</heading>
<p><tt>#define MyString "a ca c"<br />#define MyString2 StringChange(MyString, " ", "b")<br />// MyString2 = 'abcabc'<br />
</tt></p>
</body>
</topic>
<topic name="iswin64" title="Inno Setup Preprocessor: IsWin64">
<keyword value="IsWin64" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> IsWin64()<br />
</tt></p>
<heading>Description</heading>
<p>Returns non-zero if the system is running a 64-bit version of Windows that provides the API support Inno Setup requires to perform 64-bit installation tasks, or zero otherwise.</p>
</body>
</topic>
<topic name="defined" title="Inno Setup Preprocessor: Defined">
<keyword value="Defined" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Defined(&lt;ident&gt;)<br />
<b>int</b> Defined &lt;ident&gt;<br />
</tt></p>
<heading>Description</heading>
<p>Special function. Returns non-zero if the specified identifier is defined with <tt><link topic="define">define</link></tt> directive.</p>
<p>Using parentheses is optional.</p>
</body>
</topic>
<topic name="typeof" title="Inno Setup Preprocessor: TypeOf">
<keyword value="TypeOf" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> TypeOf(&lt;ident&gt;)<br />
<b>int</b> TypeOf &lt;ident&gt;<br />
</tt></p>
<heading>Description</heading>
<p>Special function. Returns one of predefined TypeOf constants which are declared in <link topic="builtinsiss">ISPPBuiltins.iss</link> for the specified identifier.</p>
<p>Using parentheses is optional.</p>
</body>
</topic>
<topic name="dimof" title="Inno Setup Preprocessor: DimOf">
<keyword value="DimOf" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> DimOf(&lt;ident&gt;)<br />
<b>int</b> DimOf &lt;ident&gt;<br />
</tt></p>
<heading>Description</heading>
<p>Special function. Returns the dimension of the specified identifier.</p>
<p>Using parentheses is optional.</p>
<heading>See also</heading>
<p><tt><link topic="dim">dim</link></tt>, <tt><link topic="dim">redim</link></tt>.</p>
</body>
</topic>
<topic name="getversionnumbers" title="Inno Setup Preprocessor: GetVersionNumbers">
<keyword value="GetVersionNumbers" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetVersionNumbers(<b>str</b> Filename, <b>int</b> *VersionMS, <b>int</b> *VersionLS)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the version numbers of the specified file. Returns the version as a string (in "0.0.0.0" format) if successful, an empty string otherwise.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="packversionnumbers">PackVersionNumbers</link></tt>
</p>
</body>
</topic>
<topic name="getversioncomponents" title="Inno Setup Preprocessor: GetVersionComponents">
<keyword value="GetVersionComponents" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetVersionComponents(<b>str</b> Filename, <b>int</b> *Major, <b>int</b> *Minor, <b>int</b> *Revision, <b>int</b> *Build)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the individual version components of the specified file. Returns the version as a string (in "0.0.0.0" format) if successful, an empty string otherwise.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="packversioncomponents">PackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="getversionnumbersstring" title="Inno Setup Preprocessor: GetVersionNumbersString">
<keyword value="GetVersionNumbersString" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetVersionNumbersString(<b>str</b> Filename)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the version of the specified file as a string (in "0.0.0.0" format) if successful, an empty string otherwise.</p>
<p>Also see <link topic="getstringfileinfo">GetStringFileInfo</link>, which can also be used to retrieve file versions using "FileVersion" or "ProductVersion" as the second parameter. The difference is that GetVersionNumbersString takes it from the fixed block of version info, unlike GetStringFileInfo which extracts string from the language specific block.</p>
</body>
</topic>
<topic name="getpackedversion" title="Inno Setup Preprocessor: GetPackedVersion">
<keyword value="GetPackedVersion" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> GetPackedVersion(<b>str</b> Filename, <b>int</b> *Version)<br />
</tt></p>
<heading>Description</heading>
<p>Gets the packed version of the specified file. Returns the version as a string (in "0.0.0.0" format) if successful, an empty string otherwise.</p>
<p>Always use <tt><link topic="comparepackedversion">ComparePackedVersion</link></tt> or <tt><link topic="samepackedversion">SamePackedVersion</link></tt> to compare packed versions.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="packversioncomponents">PackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="packversionnumbers" title="Inno Setup Preprocessor: PackVersionNumbers">
<keyword value="PackVersionNumbers" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> PackVersionNumbers(<b>int</b> VersionMS, <b>int</b> VersionLS)<br />
</tt></p>
<heading>Description</heading>
<p>Packs version numbers into a single value.</p>
<p>Always use <tt><link topic="comparepackedversion">ComparePackedVersion</link></tt> or <tt><link topic="samepackedversion">SamePackedVersion</link></tt> to compare packed versions.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="getversionnumbers">GetVersionNumbers</link></tt>, <tt><link topic="packversioncomponents">PackVersionComponents</link></tt>, <tt><link topic="unpackversionnumbers">UnpackVersionNumbers</link></tt>
</p>
</body>
</topic>
<topic name="packversioncomponents" title="Inno Setup Preprocessor: PackVersionComponents">
<keyword value="PackVersionComponents" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> PackVersionComponents(<b>int</b> Major, <b>int</b> Minor, <b>int</b> Revision, <b>int</b> Build)<br />
</tt></p>
<heading>Description</heading>
<p>Packs individual version components into a single value.</p>
<p>Always use <tt><link topic="comparepackedversion">ComparePackedVersion</link></tt> or <tt><link topic="samepackedversion">SamePackedVersion</link></tt> to compare packed versions.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="getversioncomponents">GetVersionComponents</link></tt>, <tt><link topic="packversionnumbers">PackVersionNumbers</link></tt>, <tt><link topic="unpackversioncomponents">UnpackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="comparepackedversion" title="Inno Setup Preprocessor: ComparePackedVersion">
<keyword value="ComparePackedVersion" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> ComparePackedVersion(<b>int</b> Version1, <b>int</b> Version2)<br />
</tt></p>
<heading>Description</heading>
<p>Compares Version1 to Version2. The return value is less than 0 if Version1 is less than Version2, 0 if Version1 equals Version2, or greater than 0 if Version1 is greater than Version2.</p>
</body>
</topic>
<topic name="samepackedversion" title="Inno Setup Preprocessor: SamePackedVersion">
<keyword value="SamePackedVersion" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> SamePackedVersion(<b>int</b> Version1, <b>int</b> Version2)<br />
</tt></p>
<heading>Description</heading>
<p>Compares the packed versions Version1 and Version2 and returns True if they are equal.</p>
</body>
</topic>
<topic name="unpackversionnumbers" title="Inno Setup Preprocessor: UnpackVersionNumbers">
<keyword value="UnpackVersionNumbers" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> UnpackVersionNumbers(<b>int</b> Version, <b>int</b> *VersionMS, <b>int</b> *VersionLS)<br />
</tt></p>
<heading>Description</heading>
<p>Unpacks a packed version into version numbers.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="unpackversioncomponents">UnpackVersionComponents</link></tt>, <tt><link topic="packversionnumbers">PackVersionNumbers</link></tt>
</p>
</body>
</topic>
<topic name="unpackversioncomponents" title="Inno Setup Preprocessor: UnpackVersionComponents">
<keyword value="UnpackVersionComponents" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> UnpackVersionComponents(<b>int</b> Version, <b>int</b> *Major, <b>int</b> *Minor, <b>int</b> *Revision, <b>int</b> *Build)<br />
</tt></p>
<heading>Description</heading>
<p>Unpacks a packed version into individual version components.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="unpackversionnumbers">UnpackVersionNumbers</link></tt>, <tt><link topic="packversioncomponents">PackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="versiontostr" title="Inno Setup Preprocessor: VersionToStr">
<keyword value="VersionToStr" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> VersionToStr(<b>int</b> Version)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the specified packed version as a string (in "0.0.0.0" format).</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="strtoversion">StrToVersion</link></tt>, <tt><link topic="unpackversionnumbers">UnpackVersionNumbers</link></tt>, <tt><link topic="unpackversioncomponents">UnpackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="strtoversion" title="Inno Setup Preprocessor: StrToVersion">
<keyword value="StrToVersion" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> StrToVersion(<b>str</b> Version)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the specified string (in "0.0.0.0" format) as a packed version.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
<heading>See also</heading>
<p><tt><link topic="versiontostr">VersionToStr</link></tt>, <tt><link topic="packversionnumbers">PackVersionNumbers</link></tt>, <tt><link topic="packversioncomponents">PackVersionComponents</link></tt>
</p>
</body>
</topic>
<topic name="encodever" title="Inno Setup Preprocessor: EncodeVer">
<keyword value="EncodeVer" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> EncodeVer(<b>int</b> Major, <b>int</b> Minor, <b>int</b> Revision = 0, <b>int</b> Build = -1)<br />
</tt></p>
<heading>Description</heading>
<p>Returns given four version elements encoded to a 32 bit integer number (8 bits for each element, i.e. elements must be within 0...255 range).</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="decodever" title="Inno Setup Preprocessor: DecodeVer">
<keyword value="DecodeVer" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> DecodeVer(<b>int</b> Version, <b>int</b> Digits = 3)<br />
</tt></p>
<heading>Description</heading>
<p>Returns given 32 bit integer encoded version decoded to its string representation. The Digits parameter indicates how many elements to show (if the fourth element is 0, it won't be shown anyway).</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="findsection" title="Inno Setup Preprocessor: FindSection">
<keyword value="FindSection" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FindSection(<b>str</b> Section = "Files")<br />
</tt></p>
<heading>Description</heading>
<p>Returns the index of the line following the header of the section. This function is intended to be used with <tt><link topic="insert">insert</link></tt> directive.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="findsectionend" title="Inno Setup Preprocessor: FindSectionEnd">
<keyword value="FindSectionEnd" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FindSectionEnd(<b>str</b> Section = "Files")<br />
</tt></p>
<heading>Description</heading>
<p>Returns the index of the line following last entry of the section. This function is intended to be used with #insert directive.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="findcode" title="Inno Setup Preprocessor: FindCode">
<keyword value="FindCode" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> FindCode()<br />
</tt></p>
<heading>Description</heading>
<p>Returns the index of the line following either the [Code] section header, or the "program" keyword, if any.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="extractfilepath" title="Inno Setup Preprocessor: ExtractFilePath">
<keyword value="ExtractFilePath" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ExtractFilePath(<b>str</b> PathName)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the directory portion of the given filename with a backslash. If PathName doesn't contain a directory portion, the result is an empty string.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="extractfiledir" title="Inno Setup Preprocessor: ExtractFileDir">
<keyword value="ExtractFileDir" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ExtractFileDir(<b>str</b> PathName)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the directory portion of the given filename without a backslash (unless it is a root directory). If PathName doesn't contain a directory portion, the result is an empty string.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="extractfileext" title="Inno Setup Preprocessor: ExtractFileExt">
<keyword value="ExtractFileExt" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ExtractFileExt(<b>str</b> PathName)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the extension portion of the given filename, NOT including the period character.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="extractfilename" title="Inno Setup Preprocessor: ExtractFileName">
<keyword value="ExtractFileName" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ExtractFileName(<b>str</b> PathName)<br />
</tt></p>
<heading>Description</heading>
<p>Returns the name portion of the given filename. If PathName ends with a backslash, the result is an empty string.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="changefileext" title="Inno Setup Preprocessor: ChangeFileExt">
<keyword value="ChangeFileExt" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> ChangeFileExt(<b>str</b> FileName, <b>str</b> NewExt)<br />
</tt></p>
<heading>Description</heading>
<p>Changes the extension in FileName with NewExt. NewExt must not contain period.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="removefileext" title="Inno Setup Preprocessor: RemoveFileExt">
<keyword value="RemoveFileExt" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> RemoveFileExt(<b>str</b> FileName)<br />
</tt></p>
<heading>Description</heading>
<p>Removes the extension in FileName.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="addbackslash" title="Inno Setup Preprocessor: AddBackslash">
<keyword value="AddBackslash" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> AddBackslash(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Appends a backslash to the string, if it's not already there, and returns the result.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="removebackslash" title="Inno Setup Preprocessor: RemoveBackslash">
<keyword value="RemoveBackslash" />
<body>
<heading>Prototype</heading>
<p><tt><b>str</b> RemoveBackslash(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Removes the trailing backslash from the string unless the string points to a root directory, and returns the result.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="delete" title="Inno Setup Preprocessor: Delete">
<keyword value="Delete" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> Delete(<b>str</b> *S, <b>int</b> Index, <b>int</b> Count = MaxInt)<br />
</tt></p>
<heading>Description</heading>
<p>Deletes the specified number of characters beginning with Index from S. S is passed by reference (therefore is modified).</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="insert2" title="Inno Setup Preprocessor: Insert">
<keyword value="Insert" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> Insert(<b>str</b> *S, <b>int</b> Index, <b>str</b> Substr)<br />
</tt></p>
<heading>Description</heading>
<p>Inserts specified Substr at Index'th character into S. S is passed by reference (therefore is modified).</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="yesno" title="Inno Setup Preprocessor: YesNo">
<keyword value="YesNo" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> YesNo(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Returns nonzero value if given string is "yes", "true" or "1". Intended to be used with the <tt><link topic="setupsetting">SetupSetting</link></tt> function.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="power" title="Inno Setup Preprocessor: Power">
<keyword value="Power" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Power(<b>int</b> X, <b>int</b> P = 2)<br />
</tt></p>
<heading>Description</heading>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="min" title="Inno Setup Preprocessor: Min">
<keyword value="Min" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Min(<b>int</b> A, <b>int</b> B, <b>int</b> C = MaxInt)<br />
</tt></p>
<heading>Description</heading>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="max" title="Inno Setup Preprocessor: Max">
<keyword value="Max" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> Max(<b>int</b> A, <b>int</b> B, <b>int</b> C = MinInt)<br />
</tt></p>
<heading>Description</heading>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="sametext" title="Inno Setup Preprocessor: SameText">
<keyword value="SameText" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> SameText(<b>str</b> S1, <b>str</b> S2)<br />
</tt></p>
<heading>Description</heading>
<p>Returns True if the given strings are identical, ignoring case.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="samestr" title="Inno Setup Preprocessor: SameStr">
<keyword value="SameStr" />
<body>
<heading>Prototype</heading>
<p><tt><b>int</b> SameStr(<b>str</b> S1, <b>str</b> S2)<br />
</tt></p>
<heading>Description</heading>
<p>Returns True if the given strings are identical, with case-sensitivity.</p>
<p>Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="message" title="Inno Setup Preprocessor: Message">
<keyword value="Message" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> Message(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Functional version of <tt><link topic="pragma">pragma message</link></tt>.</p>
</body>
</topic>
<topic name="warning" title="Inno Setup Preprocessor: Warning">
<keyword value="Warning" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> Warning(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Functional version of <tt><link topic="pragma">pragma warning</link></tt>.</p>
</body>
</topic>
<topic name="error2" title="Inno Setup Preprocessor: Error">
<keyword value="Error" />
<body>
<heading>Prototype</heading>
<p><tt><b>void</b> Error(<b>str</b> S)<br />
</tt></p>
<heading>Description</heading>
<p>Functional version of <tt><link topic="error">error</link></tt>.</p>
</body>
</topic>
<topic name="macros" title="Inno Setup Preprocessor: User Defined Functions">
<keyword value="User Defined Functions" />
<keyword value="#define" />
<keyword value="define" />
<keyword value="Functions" />
<keyword value="Local" />
<body>
<p>You can define user defined functions.</p>
<p>A user defined function declaration consists of a formal parameter list and an expression. That expression is evaluated when the function is called (see below). The result of the function call is the result of the expression. The expression can contain parameter names, they are treated as usual variables.</p>
<p>The formal syntax of a user defined function is provided in <tt><link topic="define">define</link></tt> and <link topic="builtinsiss">ISPPBuiltins.iss</link> contains many example functions.</p>
<p>Please note that there must be no space between the function name and opening parenthesis.</p>
<p>Actual parameters for parameters declared as by-reference must be modifiable l-values (in other words, other defined variables or expressions that evaluate to l-values). If the expression modifies by-reference parameter, the variable that is passed as this parameter gets modified. By-value parameters can also be modified by the expression (using assignment operators), but this modification doesn't affect the value of a variable which could be passed as this parameter.</p>
<p>Though a user defined function can only contain one expression, sequential evaluation operators (comma), assignment operators (simple and compound) and conditional operators (<tt>?:</tt>) can be used to build more complicated functions.</p>
<heading>Local array</heading>
<p>In context of the expression, an additional array named <tt>Local</tt> is valid. Its elements can be used for temporary storage and reusing values in sequential expressions. Values stored in <tt>Local</tt> array are neither preserved from call to call (including recursive), nor are they accessible from anywhere except the expression.</p>
<p><tt>#define DeleteToFirstPeriod(str *S) /* user defined function declaration */ \<br />  Local[1] = <link topic="copy">Copy</link>(S, 1, (Local[0] = <link topic="pos">Pos</link>(".", S)) - 1), \<br />  S = Copy(S, Local[0] + 1), \<br />  Local[1]<br />
</tt></p>
</body>
</topic>
<topic name="expressions" title="Inno Setup Preprocessor: Expression Syntax">
<keyword value="Expression Syntax" />
<keyword value="Data types" />
<keyword value="Types" />
<keyword value="Comments" />
<body>
<p>ISPP uses C/C++-like expression syntax. It supports simple and compound assignment operators, conditional operator, and sequential evaluation operator. Although ISPP is an interpreter, it does support short circuit boolean evaluation and never evaluates expressions (nor calls any user defined functions mentioned in those expressions) that should not be evaluated due to specific rules (for example, when conditional operator is used, always only 2 out of 3 operands are evaluated).</p>
<p><link topic="builtinsiss">ISPPBuiltins.iss</link> contains many example expressions.</p>
<heading>Differences between C and ISPP expression syntax</heading>
<ul><li>ISPP does not support a number of operators (reference, dereference, namespace resolution, member selection, etc.).</li>
<li>ISPP treats an identifier and the equality sign as a name of an argument, if it is used in argument list.</li>
<li>Arithmetic division operator (slash) performs integer division, since ISPP does not support floating point math.</li>
<li>ISPP does not check for validity of expressions in certain cases. For example, in conditional expression, "true" operand can be of string type, whereas "false" operand can be of integer type.</li>
<li>String literals can be quoted by both single and double quotes (in both modes – C-style or Pascal-style). If a literal begins with a single quote, it must also end with a single quote. Double quotes may be used in single quoted string without any escaping, and vice versa. Within a string, the character used to quote the string must be escaped (the manner depends on current state of "Pascal-style string literals" parser option, see <tt><link topic="pragma">pragma</link></tt>).</li>
</ul>
<heading>Data types</heading>
<p>There are three types in ISPP: void, integer, and string. Variable of void type is declared by just specifying its name after <tt><link topic="define">define</link></tt> directive without any value. Such variables should be used with <tt><link topic="ifdef">ifdef</link></tt> directive or <tt><link topic="defined">Defined</link></tt> function.</p>
<p>If "allow undeclared identifiers" parser option is off (the default state, see <tt><link topic="pragma">pragma</link></tt>), an error is raised when undefined variable is mentioned. Otherwise, it will be treated as a value of type void.</p>
<p>Void is compatible with integer and string in expressions. For example, you can use addition operator with void and integer operands, in this case void operand will be treated as zero. In conjunction with string, void operand is treated as an empty string.</p>
<heading>Comments</heading>
<p>Comments may be embedded in an expression by using a slash and an asterisk. For example:</p>
<p><tt>#emit Var1 /* this is a comment */ + Var2 /* this is also a comment */<br />
</tt></p>
<p>Comments may also be placed at the end of an expression by using a semicolon or two slashes. For example:</p>
<p><tt>#emit Var1 + Var2 ; this is a comment<br />#emit Var1 + Var2 // this is also comment<br />
</tt></p>
<p>Please note that line spanning feature is triggered before any further processing, so this is also a valid comment:</p>
<p><tt>#emit Var1 + Var2 ; this is \<br />  still a comment<br />
</tt></p>
<p>Comments may also be placed anywhere by starting a line with two slashes. For example:</p>
<p><tt>// This is a comment<br />
</tt></p>
<p>All of the comments listed above are not included in the <link topic="translation">preprocessor output</link>, unlike (non ISPP) comments using a semicolon at the start of a line. For example:</p>
<p><tt>#emit Var1 + Var2 ; this comment is not included<br />// This comment is not included<br />; This comment IS included<br />
</tt></p>
<heading>Extended User Defined Function Call Syntax</heading>
<p>In ISPP, it is possible to use named arguments when calling user defined function. Given the declaration:</p>
<p><tt>#define MyFunction(int A = 2, int B = 2) A + B<br />
</tt></p>
<p>This function can be called specifying argument names:</p>
<p><tt>#emit MyFunction(A = 5, B = 10)<br />#emit MyFunction(B = 3)<br />#emit MyFunction(B = 10, A = 5)<br />
</tt></p>
<ul><li>If a name is specified for one argument, then all (required) arguments in the list must also be named.</li>
<li>The order of named arguments does not matter.</li>
<li><p>Because of this extension, an assignment expression must be enclosed in parentheses, if not using extended call syntax, to avoid ambiguity:</p>
<p><tt>#emit MyFunction((MyVar = 5), 10)<br />
</tt></p>
<p>In the above example, the equality sign is treated as a direct assignment operator.</p>
<p>Although functions do not have named arguments, it is still required to enclose assignment expressions in parentheses when calling those functions.</p>
</li>
<li><p>By standard rule, comma is used to separate actual parameters. If you need to use sequential evaluation operator, you must include the expression in parentheses:</p>
<p><tt>#emit MyFunction((SaveToFile("script.txt"), 5), 10)<br />
</tt></p>
<p>In the above example, the first comma is treated as the sequential evaluation operator, whereas the second one as the argument delimiter.</p>
</li>
</ul>
</body>
</topic>
<topic name="predefinedvars" title="Inno Setup Preprocessor: Predefined Variables">
<keyword value="Predefined Variables" />
<keyword value="__COUNTER__" />
<keyword value="__FILE__" />
<keyword value="__INCLUDE__" />
<keyword value="__LINE__" />
<keyword value="__OPT_X__" />
<keyword value="__PATHFILENAME__" />
<keyword value="__POPT_X__" />
<keyword value="__WIN32__" />
<keyword value="ISPP_INVOKED" />
<keyword value="ISPPCC_INVOKED" />
<keyword value="PREPROCVER" />
<keyword value="WINDOWS" />
<keyword value="UNICODE" />
<keyword value="CompilerPath" />
<keyword value="SourcePath" />
<keyword value="Ver" />
<keyword value="NewLine" />
<keyword value="Tab" />
<body>
<p>There are a number of predefined variables provided ISPP:</p>
<table><tr><td><tt>__COUNTER__</tt>
</td>
<td><tt><b>int</b></tt>. Automatically increments each time it is used (afterwards).</td>
</tr>
<tr><td><tt>__FILE__</tt>
</td>
<td><tt><b>str</b></tt>. Returns the name of the current file. Empty string for the root file.</td>
</tr>
<tr><td><tt>__INCLUDE__</tt>
</td>
<td><tt><b>str</b></tt>. Returns the current include path (or paths delimited with semicolons) set via <tt>#pragma include</tt>.</td>
</tr>
<tr><td><tt>__LINE__</tt>
</td>
<td><tt><b>int</b></tt>. Returns the number of the line in the current file.</td>
</tr>
<tr><td><tt>__OPT_X__</tt>
</td>
<td><tt><b>void</b></tt>. Defined if specified option set via <tt>#pragma option -x+</tt> is in effect. In place of "X" may be any letter from "A" to "Z." Use <link topic="defined">Defined</link> function to test whether the variable is defined.</td>
</tr>
<tr><td><tt>__PATHFILENAME__</tt>
</td>
<td><tt><b>str</b></tt>. Similar to __FILE__, but returns the full pathname of the file. Empty string for the root file.</td>
</tr>
<tr><td><tt>__POPT_X__</tt>
</td>
<td><tt><b>void</b></tt>. Defined if specified parser option set via <tt>#pragma parseroption -x+</tt> is in effect. In place of "X" may be any letter from "A" to "Z." Use <link topic="defined">Defined</link> function to test whether the variable is defined.</td>
</tr>
<tr><td><tt>__WIN32__</tt>
</td>
<td><tt><b>void</b></tt>. Always defined.</td>
</tr>
<tr><td><tt>ISPP_INVOKED</tt>
</td>
<td><tt><b>void</b></tt>. Always defined.</td>
</tr>
<tr><td><tt>ISPPCC_INVOKED</tt>
</td>
<td><tt><b>void</b></tt>. Defined if compilation was invoked using the console-mode compiler, ISCC.exe.</td>
</tr>
<tr><td><tt>PREPROCVER</tt>
</td>
<td><tt><b>int</b></tt>. Returns the 32-bit encoded version of ISPP. Highest byte holds the major version, lowest byte holds the build number.</td>
</tr>
<tr><td><tt>WINDOWS</tt>
</td>
<td><tt><b>void</b></tt>. Always defined.</td>
</tr>
<tr><td><tt>UNICODE</tt>
</td>
<td><tt><b>void</b></tt>. Always defined.</td>
</tr>
<tr><td><tt>CompilerPath</tt>
</td>
<td><tt><b>str</b></tt>. Points to the directory where the compiler is located.</td>
</tr>
<tr><td><tt>SourcePath</tt>
</td>
<td><tt><b>str</b></tt>. Points to the directory where the current script is located, or the My Documents directory if the script has not yet been saved.</td>
</tr>
<tr><td><tt>Ver</tt>
</td>
<td><tt><b>int</b></tt>. Returns the 32-bit encoded version of Inno Setup compiler. Highest byte holds the major version, lowest byte the minor version.</td>
</tr>
<tr><td><tt>NewLine</tt>
</td>
<td><tt><b>str</b></tt>. Returns the newline character. Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</td>
</tr>
<tr><td><tt>Tab</tt>
</td>
<td><tt><b>str</b></tt>. Returns the tab character. Declared in <link topic="builtinsiss">ISPPBuiltins.iss</link>.</td>
</tr>
</table>
</body>
</topic>
<topic name="linespan" title="Inno Setup Preprocessor: Line Spanning">
<keyword value="Line Spanning" />
<body>
<p>By ending lines with ISPP's line spanning symbol preceded with a space, you can split long lines. For example:</p>
<p><tt>#define MyAppName \<br />  "My Program"<br />
</tt></p>
<p>The default line spanning symbol is "\" which can be changed using <tt><link topic="pragma">pragma</link></tt>.</p>
</body>
</topic>
<topic name="example" title="Inno Setup Preprocessor: Example Script">
<keyword value="Example Script" />
<body>
<p>An example script called <i>ISPPExample1.iss</i> is located in a separate folder. Please click the "Inno Setup Example Scripts" shortcut created in the Start Menu when you installed Inno Setup, or open the "Examples" folder in your Inno Setup directory.</p>
<p>Also see <link topic="builtinsiss">ISPPBuiltins.iss</link>.</p>
</body>
</topic>
<topic name="builtinsiss" title="Inno Setup Preprocessor: ISPPBuiltins.iss">
<keyword value="ISPPBuiltins.iss" />
<body>
<p>The ISPPBuiltins.iss file is part of Inno Setup Preprocessor and is automatically installed to root of your Inno Setup folder. This file is automatically included at the start of preprocessing: some of ISPP's functions are actually implemented by this file instead of being built-in. It also contains common declarations such as special constants. The file is a regular Inno Setup Script file so you can use all of its techniques in your own script as well.</p>
</body>
</topic>
<topic name="visibility" title="Inno Setup Preprocessor: Visibility of Identifiers">
<keyword value="Visibility of Identifiers" />
<keyword value="private" />
<keyword value="protected" />
<keyword value="public" />
<keyword value="visibility" />
<body>
<p>Variables (as well as user defined functions, read "variable or user defined function" anywhere it says "variable" below) can be explicitly defined as "public," "protected," or "private." To define such a variable, its name in its <tt><link topic="define">define</link></tt> directive should be prepended with one of the visibility keywords:</p>
<p><tt>#define public MyVar 12<br />#define protected MyVar 13<br />#define private MyVar 14<br />
</tt></p>
<p>In the example above, none of the last two declarations undefine any of the previous, though they share the same identifier (<tt>MyVar</tt>). This is because they are declared in different visibilities.</p>
<p>Public variables are ordinary variables accessible from anywhere after the point they are declared.</p>
<p>Protected variables are accessible only in the file they are declared in and in files included by that file via <tt><link topic="include">include</link></tt> or <tt><link topic="file">file</link></tt> directives. You can basically think of them as public variables which are automatically undefined once their file has finished.</p>
<p>Private variables are accessible only in the file they are declared in. They are not propagated to any other file, be it included or "parent" file.</p>
<p>Since ISPP does not have semantics of pushing and popping variable value, visibility resolution can be useful.</p>
<p>Note that you cannot explicitly refer to a variable in a specific visibility from expressions. Given the example above, if <tt>MyVar</tt> is mentioned in expression in declaration file, its identifier refers to private <tt>MyVar</tt>. If it is mentioned in included file, it refers to protected <tt>MyVar</tt>. If it is mentioned in one of the files above the declaration file on the include stack (i. e. one of the files from which a chain of <tt><link topic="include">include</link></tt> directives resulted in processing the declaration file), it refers to public <tt>MyVar</tt>.</p>
<p>Also note, that if we'd swap last two declarations from the above example, private <tt>MyVar</tt> would become inaccessible (until protected is undefined) because protected would be declared after it and would take precedence. But it wouldn't undefine its private counterpart.</p>
<p>Each file can set a default visibility, the visibility that will be used when no resolution clause is specified in variable declaration. This can be done using <tt><link topic="define">define</link></tt> directive, for example:</p>
<p><tt>#define protected<br />
</tt></p>
<p>sets protected visibility by default.</p>
<p>The default visibility isn't used when evaluating expressions, it is only used when a variable is defined or undefined without explicitly specifying its visibility. When default visibility is not set, public is assumed by default. Setting default visibility is not propagated on included or parent files.</p>
<p>In user defined function expressions, avoid using identifiers of lower visibility than the one the user defined function is declared in. This may cause "Undeclared identifier" errors if the user defined function is called from another file.</p>
<p>It is recommended that you use appropriate visibility when declaring variables to avoid problems with unexpected redefinition of a variable (for example in included third-party file). If no included files depend on a variable, declare it as private. If they do, but the parent file doesn't, declare it as protected. Declare it as public otherwise. If you're unsure, then protected visibility is the common case.</p>
</body>
</topic>
<topic name="isppcc" title="Inno Setup Preprocessor: Command Line Compiler Execution">
<keyword value="Command Line Compiler Execution" />
<body>
<p>If Inno Setup Preprocessor is installed the console-mode compiler ISCC.exe automatically provides extra parameters to control Inno Setup Preprocessor:</p>
<table><tr><td><tt>/D&lt;name&gt;[=&lt;value&gt;]</tt>
</td>
<td>Emulate <tt>#define public &lt;name&gt; &lt;value&gt;</tt>
</td>
</tr>
<tr><td><tt>/$&lt;letter&gt;(+|-)</tt>
</td>
<td>Emulate <tt>#pragma option -&lt;letter&gt;(+|-)</tt>
</td>
</tr>
<tr><td><tt>/P&lt;letter&gt;(+|-)</tt>
</td>
<td>Emulate <tt>#pragma parseroption -&lt;letter&gt;(+|-)</tt>
</td>
</tr>
<tr><td><tt>/I&lt;paths&gt;</tt>
</td>
<td>Emulate <tt>#pragma include &lt;paths&gt;</tt>
</td>
</tr>
<tr><td><tt>/J&lt;filename&gt;</tt>
</td>
<td>Emulate <tt>#include &lt;filename&gt;</tt>
</td>
</tr>
<tr><td><tt>/{#&lt;string&gt;</tt>
</td>
<td>Emulate <tt>#pragma inlinestart &lt;string&gt;</tt>
</td>
</tr>
<tr><td><tt>/}&lt;string&gt;</tt>
</td>
<td>Emulate <tt>#pragma inlineend &lt;string&gt;</tt>
</td>
</tr>
<tr><td><tt>/V&lt;number&gt;</tt>
</td>
<td>Emulate <tt>#pragma verboselevel &lt;number&gt;</tt>
</td>
</tr>
</table>
<p>Example: <tt>iscc /$c- /Pu+ "/DLicenseFile=Trial License.txt" /Ic:\inc;d:\inc /Jdefines.iss "c:\isetup\samples\my script.iss"</tt>
</p>
</body>
</topic>
<topic name="translation" title="Inno Setup Preprocessor: Preprocessor output">
<keyword value="Preprocessor output" />
<body>
<p>Preprocessor output refers to the preprocessed version of the script.</p>
</body>
</topic>
<topic name="current-translation" title="Inno Setup Preprocessor: Current preprocessor output">
<keyword value="Current preprocessor output" />
<body>
<p>Current preprocessor output refers to the <link topic="translation">preprocessor output</link> up to the line which ISPP is currently processing.</p>
</body>
</topic>
</ishelp>
